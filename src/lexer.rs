pub fn tokenize(source_code: &str) {}

enum Token {
    PrimitiveValue,
    NegativValue,
    PositivValue,
    Zero,
    One,
    StructStart,
    StructEnd,
    ArrayStart,
    ArrayEnd,
    Attribut_red,
    Attribut_green,
    Attribut_blue,
    Attribut_x,
    Attribut_y,
    Attribut_position,
    Attribut_rotation,
    Attribut_width,
    Attribut_border_color,
    Attribut_fill_color,
    Attribut_vertices,
    Attribut_visible_extent,
    Attribut_background_color,
    Attribut_shapes,
}

enum State {
    Start,
    String_r,
    String_re,
    String_g,
    String_gr,
    String_gre,
    String_gree,
    String_b,
    String_bl,
    String_blu,
    String_p,
    String_po,
    String_pos,
    String_posi,
    String_posit,
    String_positi,
    String_positio,
    String_ro,
    String_rot,
    String_rota,
    String_rotat,
    String_rotati,
    String_rotatio,
    String_w,
    String_wi,
    String_wid,
    String_widt,
    String_bo,
    String_bor,
    String_bord,
    String_borde,
    String_border,
    String_border_,
    String_border_c,
    String_border_co,
    String_border_col,
    String_border_colo,
    String_f,
    String_fi,
    String_fil,
    String_fill,
    String_fill_,
    String_fill_c,
    String_fill_co,
    String_fill_col,
    String_fill_colo,
    String_v,
    String_ve,
    String_ver,
    String_vert,
    String_verti,
    String_vertic,
    String_vertice,
    String_vi,
    String_vis,
    String_visi,
    String_visib,
    String_visibl,
    String_visible,
    String_visible_,
    String_visible_e,
    String_visible_ex,
    String_visible_ext,
    String_visible_exte,
    String_visible_exten,
    String_ba,
    String_bac,
    String_back,
    String_backg,
    String_backgr,
    String_backgro,
    String_backgrou,
    String_backgroun,
    String_background,
    String_background_,
    String_background_c,
    String_background_co,
    String_background_col,
    String_background_colo,
    String_s,
    String_sh,
    String_sha,
    String_shap,
    String_shape,
    Err(Vec<char>),
}

use std::f32::consts::E;

use State::*;
use Token::*;
impl State {
    fn next_state(current_state: State, input: char) -> (State, Option<Token>) {
        match current_state {
            Err(_) => {
                panic!("The `next_state`-method should never be called on State::Err")
            }
            Start => match input {
                ' ' => (Start, None),
                '=' => (Start, Some(PrimitiveValue)),
                '-' => (Start, Some(NegativValue)),
                '+' => (Start, Some(PositivValue)),
                '0' => (Start, Some(Zero)),
                '1' => (Start, Some(One)),
                '{' => (Start, Some(StructStart)),
                '}' => (Start, Some(StructEnd)),
                '[' => (Start, Some(ArrayStart)),
                ']' => (Start, Some(ArrayEnd)),
                'r' => (String_r, None),
                'g' => (String_g, None),
                'b' => (String_b, None),
                'x' => (Start, Some(Attribut_x)),
                'y' => (Start, Some(Attribut_y)),
                'p' => (String_p, None),
                'w' => (String_w, None),
                'f' => (String_f, None),
                'v' => (String_v, None),
                's' => (String_s, None),
                _ => (
                    Err(vec![
                        ' ', '=', '-', '+', '0', '1', '{', '}', '[', ']', 'r', 'g', 'b', 'x', 'y',
                        'p', 'w', 'f', 'v', 's',
                    ]),
                    None,
                ),
            },
            String_r => match input {
                'e' => (String_re, None),
                'o' => (String_ro, None),
                _ => (Err(vec!['e', 'o']), None),
            },
            String_re => match input {
                'd' => (Start, Some(Attribut_red)),
                _ => (Err(vec!['d']), None),
            },
            String_g => match input {
                'r' => (String_gr, None),
                _ => (Err(vec!['r']), None),
            },
            String_gr => match input {
                'e' => (String_gre, None),
                _ => (Err(vec!['e']), None),
            },
            String_gre => match input {
                'e' => (String_gree, None),
                _ => (Err(vec!['e']), None),
            },
            String_gree => match input {
                'n' => (Start, Some(Attribut_green)),
                _ => (Err(vec!['n']), None),
            },
            String_b => match input {
                'l' => (String_bl, None),
                'o' => (String_bo, None),
                'a' => (String_ba, None),
                _ => (Err(vec!['l', 'o', 'a']), None),
            },
            String_bl => match input {
                'u' => (String_blu, None),
                _ => (Err(vec!['u']), None),
            },
            String_blu => match input {
                'e' => (Start, Some(Attribut_blue)),
                _ => (Err(vec!['e']), None),
            },
            String_p => match input {
                'o' => (String_po, None),
                _ => (Err(vec!['o']), None),
            },
            String_po => match input {
                's' => (String_pos, None),
                _ => (Err(vec!['s']), None),
            },
            String_pos => match input {
                'i' => (String_posi, None),
                _ => (Err(vec!['i']), None),
            },
            String_posi => match input {
                't' => (String_posit, None),
                _ => (Err(vec!['t']), None),
            },
            String_posit => match input {
                'i' => (String_positi, None),
                _ => (Err(vec!['i']), None),
            },
            String_positi => match input {
                'o' => (String_positio, None),
                _ => (Err(vec!['o']), None),
            },
            String_positio => match input {
                'n' => (Start, Some(Attribut_position)),
                _ => (Err(vec!['n']), None),
            },
            String_ro => todo!(),
            String_rot => todo!(),
            String_rota => todo!(),
            String_rotat => todo!(),
            String_rotati => todo!(),
            String_rotatio => todo!(),
            String_w => todo!(),
            String_wi => todo!(),
            String_wid => todo!(),
            String_widt => todo!(),
            String_bo => todo!(),
            String_bor => todo!(),
            String_bord => todo!(),
            String_borde => todo!(),
            String_border => todo!(),
            String_border_ => todo!(),
            String_border_c => todo!(),
            String_border_co => todo!(),
            String_border_col => todo!(),
            String_border_colo => todo!(),
            String_f => todo!(),
            String_fi => todo!(),
            String_fil => todo!(),
            String_fill => todo!(),
            String_fill_ => todo!(),
            String_fill_c => todo!(),
            String_fill_co => todo!(),
            String_fill_col => todo!(),
            String_fill_colo => todo!(),
            String_v => todo!(),
            String_ve => todo!(),
            String_ver => todo!(),
            String_vert => todo!(),
            String_verti => todo!(),
            String_vertic => todo!(),
            String_vertice => todo!(),
            String_vi => todo!(),
            String_vis => todo!(),
            String_visi => todo!(),
            String_visib => todo!(),
            String_visibl => todo!(),
            String_visible => todo!(),
            String_visible_ => todo!(),
            String_visible_e => todo!(),
            String_visible_ex => todo!(),
            String_visible_ext => todo!(),
            String_visible_exte => todo!(),
            String_visible_exten => todo!(),
            String_ba => todo!(),
            String_bac => todo!(),
            String_back => todo!(),
            String_backg => todo!(),
            String_backgr => todo!(),
            String_backgro => todo!(),
            String_backgrou => todo!(),
            String_backgroun => todo!(),
            String_background => todo!(),
            String_background_ => todo!(),
            String_background_c => todo!(),
            String_background_co => todo!(),
            String_background_col => todo!(),
            String_background_colo => todo!(),
            String_s => todo!(),
            String_sh => todo!(),
            String_sha => todo!(),
            String_shap => todo!(),
            String_shape => todo!(),
        }
    }
}
